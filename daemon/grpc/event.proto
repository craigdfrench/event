// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "eventService";
option java_outer_classname = "eventServiceProto";

import "duration.proto";
import "timestamp.proto";

package event;



// The Event service definition.
service EventService {
  // Writes single event generating a unique ID
  rpc WriteSingleEvent (Event) returns (EventIdentifier) {}
  // Reads single event from unique ID
  rpc ReadSingleEvent (EventIdentifier) returns (Event) {}
  // Query multiple events 
  rpc QueryMultipleEvents(QueryEventRequest) returns (QueryEventResponse) {}
}

// The response message containing the generated ID record
message EventIdentifier {
  string Id = 1;
}

// if startTime & !endTime & !duration then startTime..NOW()
// if !startTime && endTime && !duration then GENESIS..endTime
message TimeQuery {
  google.protobuf.Timestamp startTime = 1;  // if nil uses endTime-duration..endtime
  google.protobuf.Timestamp endTime = 2;    // if nil uses startTime..startTime+duration
  google.protobuf.Duration duration = 3;    // if nil used startTime .. endTime
}


// The request message containing the event record
message Event {
  string Id = 1;
  string CreatedAt = 2;
  string Email = 3;
  string Environment = 4;
  string Component = 5;
  string Message = 6;
  string Data = 7;
}

message QueryEventRequest {
  string Email = 1;
  string Environment = 2;
  string Component = 3;
  string Message = 4;
  TimeQuery TimeRange = 5; 
}

message QueryEventResponse {
  repeated Event Results = 1;
}
